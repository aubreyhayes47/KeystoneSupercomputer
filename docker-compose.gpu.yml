# GPU-Enabled Docker Compose Configuration
# Example configurations for running simulations with GPU/NPU acceleration
#
# Usage:
#   docker compose -f docker-compose.gpu.yml up -d
#   docker compose -f docker-compose.gpu.yml run --rm fenicsx-nvidia poisson.py

services:
  # Redis - Message broker (no GPU needed)
  redis:
    image: redis:7-alpine
    container_name: keystone-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - keystone-network
    restart: unless-stopped

  # ============================================================================
  # NVIDIA GPU Examples
  # ============================================================================

  # FEniCSx with NVIDIA GPU
  fenicsx-nvidia:
    build:
      context: ./src/sim-toolbox/fenicsx
      dockerfile: Dockerfile
    image: fenicsx-toolbox:latest
    container_name: keystone-fenicsx-nvidia
    volumes:
      - ./data/fenicsx:/data
      - ./src/sim-toolbox/fenicsx:/app
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=fenicsx
      - CUDA_VISIBLE_DEVICES=0  # Use GPU 0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1  # Request 1 GPU
              capabilities: [gpu, compute, utility]
    networks:
      - keystone-network
    profiles:
      - nvidia-gpu

  # LAMMPS with NVIDIA GPU
  lammps-nvidia:
    build:
      context: ./src/sim-toolbox/lammps
      dockerfile: Dockerfile
    image: keystone/lammps:latest
    container_name: keystone-lammps-nvidia
    volumes:
      - ./data/lammps:/data
    environment:
      - SIMULATION_TYPE=lammps
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    networks:
      - keystone-network
    profiles:
      - nvidia-gpu

  # OpenFOAM with NVIDIA GPU
  openfoam-nvidia:
    build:
      context: ./src/sim-toolbox/openfoam
      dockerfile: Dockerfile
    image: openfoam-toolbox:latest
    container_name: keystone-openfoam-nvidia
    volumes:
      - ./data/openfoam:/data
      - ./src/sim-toolbox/openfoam:/workspace
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=openfoam
      - FOAM_RUN=/workspace/foam-run
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    networks:
      - keystone-network
    profiles:
      - nvidia-gpu

  # Multi-GPU Example (NVIDIA)
  fenicsx-nvidia-multigpu:
    build:
      context: ./src/sim-toolbox/fenicsx
      dockerfile: Dockerfile
    image: fenicsx-toolbox:latest
    container_name: keystone-fenicsx-nvidia-multigpu
    volumes:
      - ./data/fenicsx:/data
      - ./src/sim-toolbox/fenicsx:/app
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=fenicsx
      - CUDA_VISIBLE_DEVICES=0,1  # Use GPUs 0 and 1
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 2  # Request 2 GPUs
              capabilities: [gpu, compute, utility]
    networks:
      - keystone-network
    profiles:
      - nvidia-multigpu

  # ============================================================================
  # Intel GPU/NPU Examples
  # ============================================================================

  # FEniCSx with Intel GPU
  fenicsx-intel:
    build:
      context: ./src/sim-toolbox/fenicsx
      dockerfile: Dockerfile
    image: fenicsx-toolbox:latest
    container_name: keystone-fenicsx-intel
    devices:
      - /dev/dri:/dev/dri  # Intel GPU device access
    group_add:
      - video
      - render
    volumes:
      - ./data/fenicsx:/data
      - ./src/sim-toolbox/fenicsx:/app
      # Optional: Mount oneAPI if installed on host
      # - /opt/intel/oneapi:/opt/intel/oneapi:ro
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=fenicsx
      - ZE_AFFINITY_MASK=0  # Target GPU 0
      # Optional: oneAPI environment
      # - ONEAPI_ROOT=/opt/intel/oneapi
    networks:
      - keystone-network
    profiles:
      - intel-gpu

  # LAMMPS with Intel GPU
  lammps-intel:
    build:
      context: ./src/sim-toolbox/lammps
      dockerfile: Dockerfile
    image: keystone/lammps:latest
    container_name: keystone-lammps-intel
    devices:
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./data/lammps:/data
    environment:
      - SIMULATION_TYPE=lammps
      - ZE_AFFINITY_MASK=0
    networks:
      - keystone-network
    profiles:
      - intel-gpu

  # OpenFOAM with Intel GPU
  openfoam-intel:
    build:
      context: ./src/sim-toolbox/openfoam
      dockerfile: Dockerfile
    image: openfoam-toolbox:latest
    container_name: keystone-openfoam-intel
    devices:
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./data/openfoam:/data
      - ./src/sim-toolbox/openfoam:/workspace
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=openfoam
      - FOAM_RUN=/workspace/foam-run
      - ZE_AFFINITY_MASK=0
    networks:
      - keystone-network
    profiles:
      - intel-gpu

  # ============================================================================
  # AMD GPU Examples
  # ============================================================================

  # FEniCSx with AMD GPU
  fenicsx-amd:
    build:
      context: ./src/sim-toolbox/fenicsx
      dockerfile: Dockerfile
    image: fenicsx-toolbox:latest
    container_name: keystone-fenicsx-amd
    devices:
      - /dev/kfd:/dev/kfd  # AMD KFD device
      - /dev/dri:/dev/dri  # DRM device
    group_add:
      - video
      - render
    volumes:
      - ./data/fenicsx:/data
      - ./src/sim-toolbox/fenicsx:/app
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=fenicsx
      - HSA_OVERRIDE_GFX_VERSION=10.3.0  # Adjust for your GPU
      - HIP_VISIBLE_DEVICES=0  # Use GPU 0
    networks:
      - keystone-network
    profiles:
      - amd-gpu

  # LAMMPS with AMD GPU
  lammps-amd:
    build:
      context: ./src/sim-toolbox/lammps
      dockerfile: Dockerfile
    image: keystone/lammps:latest
    container_name: keystone-lammps-amd
    devices:
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./data/lammps:/data
    environment:
      - SIMULATION_TYPE=lammps
      - HSA_OVERRIDE_GFX_VERSION=10.3.0
      - HIP_VISIBLE_DEVICES=0
    networks:
      - keystone-network
    profiles:
      - amd-gpu

  # OpenFOAM with AMD GPU
  openfoam-amd:
    build:
      context: ./src/sim-toolbox/openfoam
      dockerfile: Dockerfile
    image: openfoam-toolbox:latest
    container_name: keystone-openfoam-amd
    devices:
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./data/openfoam:/data
      - ./src/sim-toolbox/openfoam:/workspace
    environment:
      - PYTHONUNBUFFERED=1
      - SIMULATION_TYPE=openfoam
      - FOAM_RUN=/workspace/foam-run
      - HSA_OVERRIDE_GFX_VERSION=10.3.0
      - HIP_VISIBLE_DEVICES=0
    networks:
      - keystone-network
    profiles:
      - amd-gpu

  # ============================================================================
  # Celery Worker with GPU Access
  # ============================================================================

  # Celery Worker with NVIDIA GPU support
  celery-worker-nvidia:
    build:
      context: .
      dockerfile: Dockerfile.celery
    image: keystone-celery-worker:latest
    container_name: keystone-celery-worker-nvidia
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./src/celery_app.py:/app/celery_app.py
      - ./data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.gpu.yml:/app/docker-compose.yml:ro
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - CUDA_VISIBLE_DEVICES=0
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu, compute, utility]
    networks:
      - keystone-network
    restart: unless-stopped
    profiles:
      - nvidia-gpu

  # Celery Worker with Intel GPU support
  celery-worker-intel:
    build:
      context: .
      dockerfile: Dockerfile.celery
    image: keystone-celery-worker:latest
    container_name: keystone-celery-worker-intel
    depends_on:
      redis:
        condition: service_healthy
    devices:
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./src/celery_app.py:/app/celery_app.py
      - ./data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.gpu.yml:/app/docker-compose.yml:ro
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - ZE_AFFINITY_MASK=0
    networks:
      - keystone-network
    restart: unless-stopped
    profiles:
      - intel-gpu

  # Celery Worker with AMD GPU support
  celery-worker-amd:
    build:
      context: .
      dockerfile: Dockerfile.celery
    image: keystone-celery-worker:latest
    container_name: keystone-celery-worker-amd
    depends_on:
      redis:
        condition: service_healthy
    devices:
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    group_add:
      - video
      - render
    volumes:
      - ./src/celery_app.py:/app/celery_app.py
      - ./data:/data
      - /var/run/docker.sock:/var/run/docker.sock
      - ./docker-compose.gpu.yml:/app/docker-compose.yml:ro
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - PYTHONUNBUFFERED=1
      - HSA_OVERRIDE_GFX_VERSION=10.3.0
      - HIP_VISIBLE_DEVICES=0
    networks:
      - keystone-network
    restart: unless-stopped
    profiles:
      - amd-gpu

networks:
  keystone-network:
    driver: bridge
    name: keystone-network

volumes:
  redis-data:
    name: keystone-redis-data

# ==============================================================================
# Usage Examples:
# ==============================================================================
#
# Start with NVIDIA GPU:
#   docker compose -f docker-compose.gpu.yml --profile nvidia-gpu up -d
#
# Start with Intel GPU:
#   docker compose -f docker-compose.gpu.yml --profile intel-gpu up -d
#
# Start with AMD GPU:
#   docker compose -f docker-compose.gpu.yml --profile amd-gpu up -d
#
# Run a simulation with NVIDIA GPU:
#   docker compose -f docker-compose.gpu.yml run --rm fenicsx-nvidia poisson.py
#
# Run a simulation with Intel GPU:
#   docker compose -f docker-compose.gpu.yml run --rm fenicsx-intel poisson.py
#
# Run a simulation with AMD GPU:
#   docker compose -f docker-compose.gpu.yml run --rm fenicsx-amd poisson.py
#
# Multi-GPU example (NVIDIA):
#   docker compose -f docker-compose.gpu.yml --profile nvidia-multigpu up -d
#
# ==============================================================================
