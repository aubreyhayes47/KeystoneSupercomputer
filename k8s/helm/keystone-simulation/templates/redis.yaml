{{- if .Values.redis.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-data
  namespace: {{ .Values.global.namespace }}
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: message-broker
    app.kubernetes.io/part-of: keystone-simulation
    helm.sh/chart: {{ include "keystone-simulation.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  accessModes:
    - {{ .Values.redis.persistence.accessMode }}
  {{- if .Values.redis.persistence.storageClass }}
  storageClassName: {{ .Values.redis.persistence.storageClass }}
  {{- end }}
  resources:
    requests:
      storage: {{ .Values.redis.persistence.size }}
---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: {{ .Values.global.namespace }}
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: message-broker
    app.kubernetes.io/part-of: keystone-simulation
    helm.sh/chart: {{ include "keystone-simulation.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: {{ .Values.redis.service.type }}
  ports:
    - port: {{ .Values.redis.service.port }}
      targetPort: 6379
      protocol: TCP
      name: redis
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: {{ .Values.global.namespace }}
  labels:
    app: redis
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: message-broker
    app.kubernetes.io/part-of: keystone-simulation
    helm.sh/chart: {{ include "keystone-simulation.chart" . }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: message-broker
        app.kubernetes.io/part-of: keystone-simulation
    spec:
      containers:
      - name: redis
        image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
        imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
        ports:
        - containerPort: 6379
          name: redis
        args:
          - redis-server
          - --appendonly
          - "yes"
        volumeMounts:
        - name: redis-data
          mountPath: /data
        {{- if .Values.redis.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: {{ .Values.redis.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.redis.livenessProbe.periodSeconds }}
        {{- end }}
        {{- if .Values.redis.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
              - redis-cli
              - ping
          initialDelaySeconds: {{ .Values.redis.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.redis.readinessProbe.periodSeconds }}
        {{- end }}
        resources:
          {{- toYaml .Values.redis.resources | nindent 10 }}
      volumes:
      - name: redis-data
        {{- if .Values.redis.persistence.enabled }}
        persistentVolumeClaim:
          claimName: redis-data
        {{- else }}
        emptyDir: {}
        {{- end }}
{{- end }}
